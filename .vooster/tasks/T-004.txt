# 소셜 로그인 및 인증 연동(Supabase Auth) 구축

**Task ID:** T-004
**Status:** DONE
**Importance:** MUST
**Complexity:** 6/10
**Urgency:** 9/10
**Dependencies:** None

## Description

# 요구사항
- 구글 OAuth 및 이메일 기반 매직 링크 로그인 지원
- 로그인 상태 유지, 세션 갱신, 로그아웃 처리
- 인증 보호 라우트: 프로젝트 저장/불러오기, 프로젝트 관리 화면은 인증 필수
- 예외 처리: 취소, 팝업 차단, 세션 만료, 네트워크 오류 안내
- 접근성 및 반응형 UI: shadcn-ui 컴포넌트 사용, 모바일 대응
- 보안: 환경변수 분리, 민감정보 클라이언트 미노출

# Implementation details
- Tech: Next.js 15 App Router, TypeScript, Supabase-js v2.x, @tanstack/react-query v5, TailwindCSS, shadcn-ui
- Supabase 프로젝트 생성 후 OAuth Provider 구글 설정, redirect URL은 /auth/callback 사용
- 환경변수: NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY 설정
- 서버 컴포넌트에서 createServerClient, 클라이언트에서 createBrowserClient로 세션 관리
- 인증 보호를 위한 서버 컴포넌트 가드와 클라이언트 훅 제공, 미인증 시 로그인 다이얼로그 또는 리다이렉트
- 로그인 UI: 구글 버튼, 이메일 입력 후 매직 링크 전송, 진행 상태 토스트 제공
- RLS는 프로젝트 테이블 작업 시 활성화(해당 테이블은 이후 작업에서 정의)

# Pseudo-code
```ts
// lib/supabase/server.ts
import { cookies } from 'next/headers'
import { createServerClient } from '@supabase/ssr'
export function getSupabaseServer(){
  const cookieStore = cookies()
  return createServerClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,{ cookies: { get: (key)=>cookieStore.get(key)?.value, set: async (key, value, options)=>{}, remove: async (key, options)=>{} } })
}

// lib/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr'
export const supabase = createBrowserClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!)

// app/(auth)/login/page.tsx
'use client'
import { supabase } from '@/lib/supabase/client'
export default function Login(){
  const signInGoogle = async()=>{ await supabase.auth.signInWithOAuth({ provider: 'google', options: { redirectTo: window.location.origin + '/auth/callback' } }) }
  const signInEmail = async(email:string)=>{ await supabase.auth.signInWithOtp({ email, options: { emailRedirectTo: window.location.origin + '/auth/callback' } }) }
  return (<div>{/* shadcn buttons, input */}</div>)
}

// app/auth/callback/route.ts
import { getSupabaseServer } from '@/lib/supabase/server'
export async function GET(){ const supabase = getSupabaseServer(); await supabase.auth.exchangeCodeForSession(); return Response.redirect(new URL('/projects', process.env.NEXT_PUBLIC_SITE_URL)) }

// app/(protected)/projects/layout.tsx
import { getSupabaseServer } from '@/lib/supabase/server'
export default async function Layout({ children }){
  const supabase = getSupabaseServer(); const { data } = await supabase.auth.getUser(); if(!data.user){ return Response.redirect('/login') }
  return children
}
```

# 테스트 전략
- 단위: auth 훅과 가드 로직 동작, 세션 존재 여부에 따른 분기 테스트(vitest)
- 통합: 로그인 플로우(구글, 이메일), 세션 만료 후 재로그인, 취소 시 에러 토스트 노출 확인(React Testing Library)
- E2E: Playwright로 모바일/데스크톱 뷰에서 로그인, 로그아웃, 보호 라우트 접근 시도 시 리다이렉트 확인
- 보안: 환경변수 노출 검증, 콘솔 워닝/에러 무발생, 쿠키 설정 확인
- 접근성: 로그인 폼 키보드 내비게이션, ARIA 라벨 검사

---

**Created:** 2025-10-09T16:19:10.736Z
**Updated:** 2025-10-09T18:07:53.435Z
