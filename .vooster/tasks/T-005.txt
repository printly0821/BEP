# 프로젝트 저장 기능 구현(Supabase DB, RLS 포함)

**Task ID:** T-005
**Status:** BACKLOG
**Importance:** MUST
**Complexity:** 7/10
**Urgency:** 9/10
**Dependencies:** T-004, T-003

## Description

# 요구사항
- 로그인 사용자 기준 현재 입력값, 계산 결과, 민감도 데이터를 프로젝트 단위로 저장
- 메타정보 포함: 프로젝트명, 생성일, 수정일, 앱 데이터 버전, 로케일
- 중복명 처리, 덮어쓰기와 새로 저장 구분, 네트워크 오류 복구
- 데이터 구조 표준화로 향후 Export/Import와 호환 유지

# Implementation details
- DB: Supabase PostgreSQL, 테이블 projects 정의 및 RLS 활성화
- API: Hono.js 기반 /api/projects POST 엔드포인트, 서버 측에서 세션 유저 검증 후 insert
- 클라이언트: React Query mutation으로 저장, 낙관적 업데이트, 토스트 피드백
- 데이터 표준: CalculationState v1 스키마 확정(inputs, results, sensitivity, chartsMeta)
- 다국어: 이름과 메모는 i18n 무관, 데이터는 동일 구조

# Pseudo-code
```sql
-- supabase migrations
create table if not exists public.projects(
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users(id) on delete cascade,
  name text not null,
  version text not null default 'v1',
  locale text not null default 'ko',
  input_json jsonb not null,
  result_json jsonb not null,
  sensitivity_json jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
alter table public.projects enable row level security;
create policy 'owner_read' on public.projects for select using (auth.uid() = user_id);
create policy 'owner_write' on public.projects for insert with check (auth.uid() = user_id);
create policy 'owner_update' on public.projects for update using (auth.uid() = user_id);
create policy 'owner_delete' on public.projects for delete using (auth.uid() = user_id);
create index on public.projects(user_id, created_at desc);
```
```ts
// types/calculation.ts
export type CalculationInputs = { price:number; unitCost:number; fixedCost:number; targetProfit?:number }
export type CalculationResults = { bepQuantity:number; bepRevenue:number; marginRate:number; targetQuantity?:number }
export type SensitivityPoint = { price:number; unitCost:number; bep:number; profit:number }
export type CalculationState = { version:'v1'; inputs:CalculationInputs; results:CalculationResults; sensitivity:SensitivityPoint[]; chartsMeta?:Record<string,unknown> }

// app/api/projects/route.ts (Hono)
import { Hono } from 'hono'
import { getSupabaseServer } from '@/lib/supabase/server'
const app = new Hono()
app.post(async c=>{ const supabase = getSupabaseServer(); const { data: { user } } = await supabase.auth.getUser(); if(!user) return c.json({ error:'unauthorized' },401); const body = await c.req.json(); const payload = { user_id:user.id, name:body.name, version:'v1', locale:body.locale ?? 'ko', input_json:body.inputs, result_json:body.results, sensitivity_json:body.sensitivity }
  const { data, error } = await supabase.from('projects').insert(payload).select('id').single(); if(error) return c.json({ error:error.message }, 400); return c.json({ id:data.id }, 201)
})
export const POST = app.fetch

// hooks/useSaveProject.ts
import { useMutation } from '@tanstack/react-query'
export function useSaveProject(){
  return useMutation({ mutationFn: async(p:{ name:string; state:CalculationState })=>{
    const res = await fetch('/api/projects', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ name:p.name, ...p.state }) }); if(!res.ok) throw new Error('save failed'); return res.json()
  }})
}
```

# 테스트 전략
- DB 마이그레이션 스모크 테스트: 테이블 생성, RLS 정책 검증
- API 단위: 인증 미포함 시 401, 필수 필드 누락 400, 정상 201 반환
- 통합: 저장 후 목록 조회 시 포함 여부, 덮어쓰기 시 updated_at 변경 확인
- 회귀: 데이터 스키마 버전 변경 시 호환성 테스트
- 실패 복구: 네트워크 실패 후 재시도, 사용자 피드백 토스트 확인

---

**Created:** 2025-10-09T16:19:10.736Z
**Updated:** 2025-10-09T16:19:10.736Z
