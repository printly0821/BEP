{
  "rules": [
    {
      "type": "prd",
      "content": "# 쉬잇크루 BEP 마진계산기 PRD\n\n## 1. 제품 한줄 정의\n초기·예비 창업자가 판매가, 원가, 고정비만 입력하면 5분 안에 손익분기점과 목표 수익 달성을 위한 판매량을 직관적 그래프와 리포트로 제공하는 웹 기반 계산기입니다.\n\n## 2. 배경 & 기회\n* 대부분의 창업자는 BEP 계산을 위해 복잡한 엑셀 시트를 사용하거나 컨설턴트의 도움을 받아야 합니다.\n* 엑셀 사용 경험이 부족하거나 모바일 환경에서는 오류와 번거로움이 큽니다.\n* 간단·정확·모바일 친화적 계산기가 있다면 빠른 의사결정을 돕고 반복 방문을 유도할 수 있습니다.\n\n## 3. 목표 & 성공 지표(KPI)\n| 목표 | 지표 | 목표값 (M+3) |\n| --- | --- | --- |\n| 핵심 가치 전달 | 첫 방문자 5분 내 BEP 계산 완료률 | ≥ 70% |\n| 사용자 확보 | 월간 활성 사용자(MAU) | ≥ 5,000명 |\n| 재방문 유도 | 30일 재방문률 | ≥ 25% |\n| 유료 전환 | Freemium → Pro 전환률 | ≥ 3% |\n\n## 4. 타깃 사용자\n1. 예비 창업자 (주 타깃)\n2. 초기 소규모 온라인 셀러\n\n## 5. 사용자 페인 포인트 & 니즈\n| Pain Point | 니즈 |\n| --- | --- |\n| 엑셀 공식 작성이 복잡하고 오류가 잦다 | 원클릭 자동 계산 |\n| 가격·원가를 바꿀 때마다 수식 오류 | 실시간 시뮬레이션 & 그래프 |\n| BEP 개념을 이해하기 어렵다 | 쉬운 설명·시각화 |\n\n## 6. 핵심 가치 제안(Value Proposition)\n“엑셀 없이 5분 만에 손익분기점을 계산하고, 목표 수익 달성을 위한 판매량을 시각적으로 확인하세요.”\n\n## 7. 주요 기능 범위\n### 7.1 MVP(Core)\n1. 값 입력 폼: 판매가·단위원가·월 고정비·목표 수익(선택)\n2. 손익분기점(BEP), 필요 판매량 자동 계산\n3. 민감도 분석 그래프(가격·원가 변화 대비 BEP·이익)\n4. 결과 요약 카드(손익분기점, 목표 판매량, 예상 이익률)\n5. 결과 PDF/엑셀 다운로드 (워터마크 포함 무료 제공)\n6. 반응형 UI (모바일·데스크톱)\n\n### 7.2 플러스 기능(Freemium)\n1. 슬라이더 시뮬레이터(실시간 값 변동)\n2. 프로젝트 저장·불러오기(클라우드) – 로그인 필요\n3. 목표 달성 이메일 알림(주간 리포트)\n4. 광고 제거 & 고해상도 리포트 다운로드\n\n### 7.3 향후(Backlog)\n* 여러 제품 라인 대시보드(복수 제품 비교)\n* 투자자용 리포트 템플릿 추가\n* 협업 초대(멀티 유저)\n\n## 8. 사용자 흐름 요약\nLanding → 입력폼 작성 → 결과 대시보드 확인 → (옵션) 슬라이더 시뮬레이션 → PDF/엑셀 다운로드 → (옵션) 로그인 & 프로젝트 저장 → 이메일 알림 설정\n\n## 9. 비즈니스 모델\nFreemium\n* Free: 핵심 계산, 기본 그래프, 워터마크 PDF/엑셀\n* Pro(₩9,900/월): 프로젝트 저장·불러오기, 고해상도 리포트, 광고 제거, 이메일 알림\n\n## 10. 기술 스택(기본)\nNext.js 15, Hono.js, Supabase(PostgreSQL & Auth), TypeScript, TailwindCSS, shadcn-ui, lucide-react, @tanstack/react-query\n\n## 11. 제약 & 가정\n* MVP 일정: 6주 내 출시 목표\n* 외부 연동 없음(결제 제외)\n* 한국어·영어 UI 동시 제공(데이터는 동일)\n\n## 12. 리스크 & 대응\n| 리스크 | 대응 |\n| --- | --- |\n| 계산 로직 오류 | 단위 테스트 & 검증 시나리오 작성 |\n| 무료 사용자만 몰릴 가능성 | 고급 리포트·저장 기능에 확실한 가치를 부여 |\n| 모바일 UX 저하 | 모바일 퍼스트 디자인 가이드 적용 |\n\n## 13. 출시 후 측정 항목\n* 구글 애널리틱스: 계산 완료 이벤트, 클릭 흐름 분석\n* Supabase DB: 사용자 저장 프로젝트 수, 유료 전환 로그\n\n## 14. 일정(High-level Roadmap)\n| 주차 | 내용 |\n| --- | --- |\n| 1 | 요구사항 확정 · UI 목업 |\n| 2~3 | 핵심 기능 개발 · 계산 로직 검증 |\n| 4 | 그래프 & PDF/엑셀 Export |\n| 5 | 반응형·다국어 · QA |\n| 6 | 배포 · 마케팅 랜딩 · 피드백 수집 |\n\n---\n본 PRD는 2025-10-08 기준 작성되었으며, 이해관계자 승인 후 변경될 수 있습니다.",
      "writedAt": "2025-10-12T16:19:16.461Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n  \n## Tech Stack\n\nNext.js 15, Hono.js, Supabase, TypeScript, TailwindCSS, shadcn-ui, lucide-react, @tanstack/react-query, OpenAI API, Stripe\n\n## Directory Structure\n\n\n/\n├── src/\n│   ├── app/                        # Next.js app router\n│   │   ├── (protected)/            # protected routes group\n│   │   │   └── dashboard/          # dashboard pages\n│   │   ├── api/                    # API routes (Hono integration)\n│   │   ├── login/                  # auth pages\n│   │   ├── signup/                 # auth pages\n│   │   └── example/                # example pages\n│   ├── backend/                    # server-side logic\n│   │   ├── config/                 # backend configuration\n│   │   ├── hono/                   # Hono app setup\n│   │   ├── http/                   # HTTP utilities\n│   │   ├── middleware/             # server middleware\n│   │   └── supabase/               # supabase server client\n│   ├── components/                 # common components\n│   │   └── ui/                     # shadcn/ui components\n│   ├── features/                   # feature-based modules\n│   │   ├── auth/                   # authentication feature\n│   │   │   ├── context/            # auth contexts\n│   │   │   ├── hooks/              # auth hooks\n│   │   │   ├── server/             # auth server logic\n│   │   │   └── types.ts            # auth types\n│   │   └── [featureName]/          \n│   │       ├── backend/            # backend logic\n│   │       ├── components/         # feature components\n│   │       ├── pages/              # feature pages\n│   │       ├── constants.ts        # feature constants\n│   │       ├── types.ts            # feature types\n│   │       └── utils.ts            # feature utils\n│   │       ├── hooks/              # feature hooks\n│   │       └── lib/                # feature utilities\n│   ├── constants/                  # global constants\n│   ├── hooks/                      # common hooks\n│   └── lib/                        # utilities\n│       ├── remote/                 # API client\n│       ├── supabase/               # supabase client setup\n│       └── utils.ts                # shadcn cn utility\n├── public/                         # static assets\n└── supabase/migrations/            # supabase migrations\n\n  ",
      "writedAt": "2025-10-12T16:19:16.461Z"
    },
    {
      "type": "guideline",
      "content": "\n    # Senior Developer Guidelines\n    \n    ## Must\n    \n    - always use client component for all components. (use `use client` directive)\n    - always use promise for page.tsx params props.\n    - use valid picsum.photos stock image for placeholder image\n    \n    ## Library\n    \n    use following libraries for specific functionalities:\n    \n    1. `date-fns`: For efficient date and time handling.\n    2. `ts-pattern`: For clean and type-safe branching logic.\n    3. `@tanstack/react-query`: For server state management.\n    4. `zustand`: For lightweight global state management.\n    5. `react-use`: For commonly needed React hooks.\n    6. `es-toolkit`: For robust utility functions.\n    7. `lucide-react`: For customizable icons.\n    8. `zod`: For schema validation and data integrity.\n    9. `shadcn-ui`: For pre-built accessible UI components.\n    10. `tailwindcss`: For utility-first CSS styling.\n    11. `supabase`: For a backend-as-a-service solution.\n    12. `react-hook-form`: For form validation and state management.\n    \n    ## Directory Structure\n    \n    - src\n    - src/app: Next.js App Routers\n    - src/components/ui: shadcn-ui components\n    - src/constants: Common constants\n    - src/hooks: Common hooks\n    - src/lib: utility functions\n    - src/remote: http client\n    - src/features/[featureName]/components/*: Components for specific feature\n    - src/features/[featureName]/constants/*\n    - src/features/[featureName]/hooks/*\n    - src/features/[featureName]/lib/*\n    - src/features/[featureName]/api.ts: api fetch functions\n    \n    ## Solution Process:\n    \n    1. Rephrase Input: Transform to clear, professional prompt.\n    2. Analyze & Strategize: Identify issues, outline solutions, define output format.\n    3. Develop Solution:\n       - \"As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:\"\n       - List steps numerically.\n       - \"To resolve these steps, I need the following solutions:\"\n       - List solutions with bullet points.\n    4. Validate Solution: Review, refine, test against edge cases.\n    5. Evaluate Progress:\n       - If incomplete: Pause, inform user, await input.\n       - If satisfactory: Proceed to final output.\n    6. Prepare Final Output:\n       - ASCII title\n       - Problem summary and approach\n       - Step-by-step solution with relevant code snippets\n       - Format code changes:\n        ```language:path/to/file\n         // ... existing code ...\n         function exampleFunction() {\n             // Modified or new code here\n         }\n         // ... existing code ...\n         ```\n       - Use appropriate formatting\n       - Describe modifications\n       - Conclude with potential improvements\n    \n    ## Key Mindsets:\n    \n    1. Simplicity\n    2. Readability\n    3. Maintainability\n    4. Testability\n    5. Reusability\n    6. Functional Paradigm\n    7. Pragmatism\n    \n    ## Code Guidelines:\n    \n    1. Early Returns\n    2. Conditional Classes over ternary\n    3. Descriptive Names\n    4. Constants > Functions\n    5. DRY\n    6. Functional & Immutable\n    7. Minimal Changes\n    8. Pure Functions\n    9. Composition over inheritance\n    \n    ## Functional Programming:\n    \n    - Avoid Mutation\n    - Use Map, Filter, Reduce\n    - Currying and Partial Application\n    - Immutability\n    \n    ## Code-Style Guidelines\n    \n    - Use TypeScript for type safety.\n    - Follow the coding standards defined in the ESLint configuration.\n    - Ensure all components are responsive and accessible.\n    - Use Tailwind CSS for styling, adhering to the defined color palette.\n    - When generating code, prioritize TypeScript and React best practices.\n    - Ensure that any new components are reusable and follow the existing design patterns.\n    - Minimize the use of AI generated comments, instead use clearly named variables and functions.\n    - Always validate user inputs and handle errors gracefully.\n    - Use the existing components and pages as a reference for the new components and pages.\n    \n    ## Performance:\n    \n    - Avoid Premature Optimization\n    - Profile Before Optimizing\n    - Optimize Judiciously\n    - Document Optimizations\n    \n    ## Comments & Documentation:\n    \n    - Comment function purpose\n    - Use JSDoc for JS\n    - Document \"why\" not \"what\"\n    \n    ## Function Ordering:\n    \n    - Higher-order functionality first\n    - Group related functions\n    \n    ## Handling Bugs:\n    \n    - Use TODO: and FIXME: comments\n    \n    ## Error Handling:\n    \n    - Use appropriate techniques\n    - Prefer returning errors over exceptions\n    \n    ## Testing:\n    \n    - Unit tests for core functionality\n    - Consider integration and end-to-end tests\n    \n    ## Next.js\n    \n    - you must use promise for page.tsx params props.\n    \n    ## Shadcn-ui\n    \n    - if you need to add new component, please show me the installation instructions. I'll paste it into terminal.\n    - example\n      ```\n      $ npx shadcn@latest add card\n      $ npx shadcn@latest add textarea\n      $ npx shadcn@latest add dialog\n      ```\n    \n    ## Supabase\n    \n    - if you need to add new table, please create migration. I'll paste it into supabase.\n    - do not run supabase locally\n    - store migration query for `.sql` file. in /supabase/migrations/\n    \n    ## Package Manager\n    \n    - use npm as package manager.\n    \n    ## Korean Text\n    \n    - 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.\n    \n    You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.\n    Apply these principles judiciously, considering project and team needs.\n      ",
      "writedAt": "2025-10-12T16:19:16.461Z"
    },
    {
      "type": "design-guide",
      "content": "# 쉬잇크루 BEP 마진계산기 Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n\n쉬잇크루 BEP 마진계산기는 **신뢰할 수 있고 전문적이면서도 접근하기 쉬운** 디자인 무드를 추구합니다. 재무 계산 도구라는 특성상 정확성과 신뢰성을 전달해야 하지만, 동시에 초기 창업자들이 부담 없이 사용할 수 있는 친근함도 필요합니다.\n\n핵심 디자인 철학:\n- **Clean & Minimal**: 복잡한 계산을 단순하고 직관적으로 표현\n- **Professional Trust**: 재무 데이터를 다루는 도구로서의 신뢰성 강조\n- **User-Friendly**: 엑셀을 어려워하는 사용자도 쉽게 접근 가능\n- **Data-Driven**: 숫자와 그래프가 명확하게 전달되는 시각적 위계\n\n## 2. Reference Service (참조 서비스)\n\n- **Name**: Stripe Dashboard\n- **Description**: 온라인 결제 및 재무 관리 플랫폼\n- **Design Mood**: 깔끔하고 전문적인 SaaS 디자인으로 복잡한 재무 데이터를 직관적으로 표현\n- **Primary Color**: #0A2540 (Deep Navy)\n- **Secondary Color**: #635BFF (Purple)\n\nStripe의 디자인 언어를 참조하여 재무 도구로서의 전문성과 신뢰성을 표현하되, 더욱 접근하기 쉬운 톤앤매너로 조정했습니다.\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n### 메인 컬러 팔레트\n- **Primary Color**: #0B1F3A (Deep Navy) - 신뢰성과 전문성을 나타내는 메인 브랜드 컬러\n- **Secondary Color**: #5FA8D3 (Soft Sky Blue) - 친근하고 접근하기 쉬운 보조 컬러\n- **Accent Color**: #30C6A4 (Mint Green) - 성공, 수익, 긍정적 결과를 나타내는 강조 컬러\n- **Surface/Background**: #F5F7FA (Light Grey) - 깔끔한 배경과 카드 영역\n- **Text/Font**: #212529 (Charcoal) - 가독성이 뛰어난 텍스트 컬러\n\n### 무드 및 사용법\n- **Mood**: Cool tone, 차분하고 안정적인 느낌의 중간 채도\n- **Color Usage**: \n  - Primary (Deep Navy): 헤더, 주요 버튼, 로고\n  - Secondary (Sky Blue): 링크, 보조 버튼, 포커스 상태\n  - Accent (Mint): 성공 메시지, 수익 표시, CTA 버튼\n  - 중요도에 따른 위계: Primary → Accent → Secondary 순으로 시각적 임팩트 부여\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n### 폰트 시스템\n- **Primary Font**: Inter (영문) / Pretendard (한글)\n- **Base Size**: 16px\n- **Line Height**: 1.5 (24px)\n\n### 타이포그래피 스케일\n- **Heading 1**: Inter/Pretendard Bold 32px, Weight 700 - 페이지 타이틀\n- **Heading 2**: Inter/Pretendard SemiBold 24px, Weight 600 - 섹션 제목\n- **Heading 3**: Inter/Pretendard Medium 20px, Weight 500 - 카드 제목\n- **Body Large**: Inter/Pretendard Regular 18px, Weight 400 - 중요한 본문\n- **Body**: Inter/Pretendard Regular 16px, Weight 400 - 기본 본문\n- **Body Small**: Inter/Pretendard Regular 14px, Weight 400 - 보조 텍스트\n- **Caption**: Inter/Pretendard Regular 12px, Weight 400 - 라벨, 캡션\n\n## 5. Layout & Structure (레이아웃 & 구조)\n\n### 그리드 시스템\n- **Desktop**: 12-column 그리드, 최대 너비 1280px\n- **Container Padding**: 좌우 24px (Desktop), 16px (Mobile)\n- **Column Gap**: 24px\n- **Responsive Breakpoints**:\n  - Mobile: ~768px\n  - Tablet: 768px~1024px  \n  - Desktop: 1024px+\n\n### 간격 시스템\n- **Base Unit**: 4px\n- **Spacing Scale**: 4px, 8px, 12px, 16px, 24px, 32px, 48px, 64px\n- **Section Spacing**: 48px (Desktop), 32px (Mobile)\n- **Card Padding**: 24px (Desktop), 16px (Mobile)\n\n### 모서리 둥글기\n- **Cards**: 6px\n- **Buttons**: 8px\n- **Input Fields**: 6px\n- **Modal**: 12px\n\n## 6. Visual Style (비주얼 스타일)\n\n### 아이콘 스타일\n- **Icon Set**: Lucide React\n- **Size**: 16px, 20px, 24px\n- **Style**: 미니멀한 선형 아이콘\n- **Color**: 텍스트 컬러와 동일하거나 Secondary 컬러 사용\n\n### 일러스트레이션\n- **Style**: 미니멀한 선형 일러스트레이션\n- **Color**: Accent 컬러 (Mint) 기반\n- **Usage**: 빈 상태(Empty State), 온보딩, 에러 페이지\n\n### 그래프 및 차트\n- **Primary**: Deep Navy (#0B1F3A)\n- **Secondary**: Sky Blue (#5FA8D3)  \n- **Success/Positive**: Mint Green (#30C6A4)\n- **Warning**: Orange (#F59E0B)\n- **Error/Negative**: Red (#EF4444)\n\n## 7. UX Guide (UX 가이드)\n\n### 타겟 사용자별 접근법\n**초보자 (Primary Focus)**:\n- 3단계 온보딩 모달 제공\n- 인라인 툴팁으로 용어 설명\n- 샘플 프로젝트로 데모 경험 제공\n- 단계별 가이드와 진행 표시기\n\n**숙련자 지원**:\n- 키보드 단축키 지원\n- 밀집된 테이블 뷰 옵션\n- 빠른 내보내기 액션\n- 고급 필터링 및 정렬 기능\n\n### 핵심 UX 원칙\n1. **5분 내 완료**: 입력부터 결과 확인까지 최대 5분\n2. **실시간 피드백**: 슬라이더 조작 시 즉시 그래프 업데이트\n3. **모바일 최적화**: 터치 친화적 인터페이스, 적절한 터치 영역\n4. **오류 방지**: 입력 검증 및 명확한 에러 메시지\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n### 버튼\n**Primary Button**:\n- Background: #30C6A4 (Mint)\n- Text: White\n- Padding: 12px 24px\n- Border Radius: 8px\n- Hover: 10% 어두워짐\n\n**Secondary Button**:\n- Background: Transparent\n- Border: 1px solid #5FA8D3\n- Text: #5FA8D3\n- Padding: 12px 24px\n- Border Radius: 8px\n\n### 입력 필드\n**Text Input**:\n- Border: 1px solid #E5E7EB\n- Background: White\n- Padding: 12px 16px\n- Border Radius: 6px\n- Focus: Border #5FA8D3, Shadow 0 0 0 3px rgba(95, 168, 211, 0.1)\n\n**Number Input**:\n- 기본 Text Input 스타일 + 우측 스테퍼 버튼\n- 모바일에서 숫자 키패드 자동 활성화\n\n### 카드\n**Metric Card**:\n- Background: White\n- Border: 1px solid #E5E7EB\n- Border Radius: 6px\n- Padding: 24px\n- Shadow: 0 1px 3px rgba(0, 0, 0, 0.1)\n\n**Result Card**:\n- 위와 동일하지만 좌측에 컬러 바(Accent 색상) 추가\n\n### 차트 컴포넌트\n**Line Chart**:\n- 라이브러리: Recharts 또는 Nivo\n- 애니메이션: 값 변경 시 200ms 부드러운 전환\n- 툴팁: 호버 시 정확한 수치 표시\n\n### 슬라이더\n**Range Slider**:\n- Track: #E5E7EB\n- Active Track: #5FA8D3\n- Thumb: #5FA8D3, 20px 크기\n- 모바일에서 터치하기 쉬운 44px 터치 영역\n\n### 모달\n**Standard Modal**:\n- Backdrop: rgba(0, 0, 0, 0.5)\n- Container: White, 12px Border Radius\n- Max Width: 500px (Desktop), 90vw (Mobile)\n- Animation: Fade in 200ms\n\n### 네비게이션\n**Top Navigation**:\n- Height: 64px\n- Background: White\n- Border Bottom: 1px solid #E5E7EB\n- Logo: 좌측 정렬\n- Menu Items: 중앙 정렬 (Desktop), 햄버거 메뉴 (Mobile)\n- Profile: 우측 정렬\n\n### 테이블\n**Data Table**:\n- Header: Background #F9FAFB, 14px Bold\n- Row Height: 48px\n- Border: 1px solid #E5E7EB\n- Hover: Background #F9FAFB\n- 정렬 가능한 컬럼에 화살표 아이콘\n\n### 상태 표시\n**Loading State**:\n- 스피너: #5FA8D3 컬러\n- 스켈레톤: #E5E7EB 배경에 애니메이션\n\n**Empty State**:\n- 일러스트레이션 + 설명 텍스트\n- CTA 버튼으로 액션 유도\n\n**Error State**:\n- 빨간색 (#EF4444) 아이콘\n- 명확한 에러 메시지와 해결 방법 제시\n\n### 접근성 고려사항\n- **색상 대비**: WCAG AA 기준 준수 (4.5:1 이상)\n- **키보드 탐색**: 모든 인터랙티브 요소 Tab 키로 접근 가능\n- **포커스 표시**: #5FA8D3 컬러로 명확한 포커스 링\n- **ARIA 라벨**: 스크린 리더를 위한 적절한 라벨링\n- **터치 영역**: 최소 44px × 44px 터치 타겟\n\n### 모션 및 애니메이션\n- **기본 전환**: 150-200ms ease-out\n- **차트 애니메이션**: 값 변경 시 부드러운 전환\n- **페이지 전환**: 200ms fade 효과\n- **호버 효과**: 100ms 빠른 반응",
      "writedAt": "2025-10-12T16:19:16.461Z"
    },
    {
      "type": "ia",
      "content": "# 쉬잇크루 BEP 마진계산기 정보 구조 (IA)\n\n## 1. 사이트맵 (사이트맵)\n\n```\n/ (홈페이지)\n├── /calculator (계산기 - 메인 기능)\n├── /projects (프로젝트 관리)\n│   ├── /projects/[id] (개별 프로젝트 상세)\n│   └── /projects/new (새 프로젝트 생성)\n├── /reports (리포트 관리)\n├── /pricing (요금제 안내)\n├── /auth\n│   ├── /auth/login (로그인)\n│   ├── /auth/signup (회원가입)\n│   └── /auth/onboarding (온보딩)\n├── /settings\n│   ├── /settings/profile (프로필 관리)\n│   └── /settings/billing (결제 관리)\n├── /help (도움말)\n└── /404 (페이지를 찾을 수 없음)\n```\n\n## 2. 사용자 흐름 (사용자 흐름)\n\n### **핵심 작업: BEP 계산 및 결과 확인**\n1. 사용자가 홈페이지 또는 직접 /calculator에 접근\n2. 입력 폼에서 판매가, 단위원가, 월 고정비 입력\n3. (선택) 목표 수익 입력\n4. 실시간으로 BEP 계산 결과 확인\n5. 민감도 분석 그래프 및 KPI 카드 검토\n6. PDF/엑셀 다운로드 또는 프로젝트 저장 선택\n\n### **부가 작업: 프로젝트 관리**\n1. 계산 완료 후 \"프로젝트 저장\" 버튼 클릭\n2. 로그인 모달 표시 (미로그인 시)\n3. 구글/이메일 로그인 완료\n4. 프로젝트명 입력 후 저장\n5. /projects 페이지로 이동하여 저장된 프로젝트 목록 확인\n\n### **시뮬레이션 작업: 실시간 변수 조정**\n1. 계산 결과 확인 후 시뮬레이션 패널 활성화\n2. 슬라이더를 통해 판매가/원가 실시간 조정\n3. 그래프와 수치가 즉시 업데이트되는 것 확인\n4. 최적 조건 발견 후 새로운 프로젝트로 저장\n\n## 3. 네비게이션 구조 (네비게이션 구조)\n\n### **글로벌 네비게이션 (GNB)**\n- **로고**: 쉬잇크루 (홈페이지로 링크)\n- **주 메뉴**: 계산기, 프로젝트, 리포트, 요금제\n- **사용자 영역**: 로그인/회원가입 버튼 또는 프로필 드롭다운\n\n### **모바일 네비게이션**\n- **햄버거 메뉴**: 모든 주 메뉴 항목 포함\n- **하단 고정 버튼**: 계산기 바로가기 (주요 CTA)\n\n### **컨텍스트 네비게이션**\n- **프로젝트 상세 페이지**: 탭 네비게이션 (개요, 시뮬레이션, 리포트)\n- **설정 페이지**: 사이드바 메뉴 (프로필, 결제 관리)\n\n### **푸터 네비게이션**\n- **고객지원**: 도움말, 문의하기\n- **회사 정보**: 이용약관, 개인정보처리방침\n- **소셜 미디어**: 링크드인, 블로그\n\n## 4. 페이지 계층 구조 (페이지 계층 구조)\n\n```\n/ (깊이 1)\n├── /calculator (깊이 1)\n├── /projects (깊이 1)\n│   └── /projects/[id] (깊이 2)\n├── /reports (깊이 1)\n├── /pricing (깊이 1)\n├── /auth (깊이 1)\n│   ├── /auth/login (깊이 2)\n│   ├── /auth/signup (깊이 2)\n│   └── /auth/onboarding (깊이 2)\n├── /settings (깊이 1)\n│   ├── /settings/profile (깊이 2)\n│   └── /settings/billing (깊이 2)\n└── /help (깊이 1)\n```\n\n## 5. 콘텐츠 구성 (콘텐츠 구성)\n\n| 페이지 | 주요 콘텐츠 요소 |\n|---|---|\n| 홈페이지 | 히어로 섹션, 주요 기능 소개, 데모 GIF, 고객 후기, CTA 버튼 |\n| 계산기 | 입력 폼, 결과 KPI 카드, 민감도 분석 그래프, 액션 버튼, 시뮬레이션 슬라이더 |\n| 프로젝트 목록 | 프로젝트 테이블, 필터/검색, 정렬 옵션, 새 프로젝트 버튼 |\n| 프로젝트 상세 | 요약 카드, 활동 로그, 시뮬레이션 도구, 생성된 리포트 목록 |\n| 리포트 | 리포트 테이블, 다운로드 링크, 필터 옵션 |\n| 요금제 | 플랜 비교 테이블, 기능 목록, 업그레이드 CTA |\n| 로그인/회원가입 | 소셜 로그인 버튼, 이메일 폼, 이용약관 동의 |\n| 설정 | 프로필 정보 폼, 결제 내역, 구독 관리 |\n\n## 6. 인터랙션 패턴 (인터랙션 패턴)\n\n### **모달 사용 패턴**\n- **로그인/회원가입**: 오버레이 모달로 페이지 이탈 없이 처리\n- **프로젝트 저장**: 간단한 이름 입력 모달\n- **삭제 확인**: 위험한 액션에 대한 확인 모달\n\n### **실시간 업데이트 패턴**\n- **계산 결과**: 입력값 변경 시 200ms 디바운스 후 자동 계산\n- **시뮬레이션**: 슬라이더 조작 시 즉시 그래프 업데이트\n- **폼 검증**: 실시간 입력 검증 및 에러 메시지 표시\n\n### **피드백 패턴**\n- **성공 알림**: 토스트 메시지로 액션 완료 알림\n- **로딩 상태**: 스켈레톤 UI 또는 스피너로 대기 상태 표시\n- **에러 처리**: 인라인 에러 메시지와 해결 방법 제시\n\n### **네비게이션 패턴**\n- **브레드크럼**: 깊은 페이지에서 경로 표시\n- **뒤로가기**: 브라우저 히스토리 지원\n- **탭 네비게이션**: 관련 콘텐츠 그룹화\n\n## 7. URL 구조 (URL 구조)\n\n### **URL 명명 규칙**\n- **일반 페이지**: `/resource-name` (예: `/calculator`, `/pricing`)\n- **상세 페이지**: `/resource-name/:id` (예: `/projects/abc123`)\n- **중첩 리소스**: `/parent/:id/child` (예: `/projects/abc123/reports`)\n- **설정 페이지**: `/settings/category` (예: `/settings/profile`)\n\n### **SEO 최적화 URL**\n- **한글 지원**: `/help/bep-calculation-guide` (영문 slug 사용)\n- **쿼리 파라미터**: 필터링 및 정렬용 (`?sort=date&filter=profitable`)\n- **해시 프래그먼트**: 페이지 내 섹션 링크용 (`#simulation-section`)\n\n## 8. 컴포넌트 계층 구조 (컴포넌트 계층 구조)\n\n### **글로벌 컴포넌트**\n- **Layout**: 전체 페이지 레이아웃 래퍼\n- **Header**: 로고, 네비게이션, 사용자 메뉴\n- **Footer**: 링크, 저작권, 소셜 미디어\n- **Sidebar**: 설정 페이지용 사이드 네비게이션\n- **Modal**: 재사용 가능한 모달 컨테이너\n- **Toast**: 알림 메시지 시스템\n\n### **폼 컴포넌트**\n- **NumberInput**: 숫자 입력 필드 (통화, 수량용)\n- **TextInput**: 텍스트 입력 필드\n- **Button**: 다양한 스타일의 버튼 (Primary, Secondary, Danger)\n- **Slider**: 시뮬레이션용 범위 슬라이더\n- **FormGroup**: 라벨과 입력 필드 그룹화\n\n### **데이터 표시 컴포넌트**\n- **MetricCard**: KPI 수치 표시 카드\n- **DataTable**: 정렬/필터링 가능한 테이블\n- **Chart**: 민감도 분석 그래프 (Line, Bar)\n- **ProgressBar**: 목표 달성률 표시\n- **Badge**: 상태 표시 라벨\n\n### **네비게이션 컴포넌트**\n- **Breadcrumb**: 경로 표시\n- **Tabs**: 탭 네비게이션\n- **Pagination**: 페이지 네비게이션\n- **Dropdown**: 드롭다운 메뉴\n\n### **페이지별 특화 컴포넌트**\n- **CalculatorForm**: 계산기 입력 폼\n- **ResultsDashboard**: 계산 결과 대시보드\n- **SimulationPanel**: 실시간 시뮬레이션 도구\n- **ProjectCard**: 프로젝트 요약 카드\n- **ReportDownload**: 리포트 다운로드 버튼\n- **PricingTable**: 요금제 비교 테이블\n\n### **상태 관리 컴포넌트**\n- **LoadingSpinner**: 로딩 상태 표시\n- **EmptyState**: 빈 목록 상태\n- **ErrorBoundary**: 에러 처리 경계\n- **SkeletonLoader**: 콘텐츠 로딩 스켈레톤\n\n### **반응형 고려사항**\n- **MobileDrawer**: 모바일 햄버거 메뉴\n- **BottomSheet**: 모바일 입력 패널\n- **TouchSlider**: 터치 최적화 슬라이더\n- **MobileTable**: 모바일용 카드 형태 테이블\n\n이 정보 구조는 사용자의 핵심 여정인 \"5분 내 BEP 계산 완료\"를 최우선으로 설계되었으며, 향후 다중 제품 비교, 협업 기능 등의 확장에도 유연하게 대응할 수 있도록 구성했습니다.",
      "writedAt": "2025-10-12T16:19:16.461Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-10-12T16:19:16.461Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-10-12T16:19:16.461Z"
    }
  ]
}